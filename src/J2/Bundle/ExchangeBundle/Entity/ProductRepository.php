<?php

namespace J2\Bundle\ExchangeBundle\Entity;

use Doctrine\ORM\EntityRepository;
use J2\Bundle\ExchangeBundle\Entity\Product;
use J2\Bundle\ExchangeBundle\Entity\User;

/**
 * ProductsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    
    /**
     * Fetch an product by id from within a company exchange
     * @param int $productID 
     * @param J2\Bundle\ExchangeBundle\Entity\User $user
     * @return J2\Bundle\ExchangeBundle\Entity\Product
     */
    public function findOneByUser($productID, User $user){
        $params=array();
        $params['id']=$productID;
        $params['company']=$user->getCompany()->getId();
        $params['exchange']=$user->getCurrentExchange()->getId();
        return $this->findOneBy($params);
    }
    
    /**
     * Create a product
     * @param stdClass $data
     * @param J2\Bundle\ExchangeBundle\Entity\User $user
     */
    public function create($data,$user){
        $product->setName($data->name);
        $product->setCode($data->code);
        $product->setPrice($data->price);
        $product->setCreatedBy($user);
        $product->setCompany($user->getCompany());
        $product->setExchange($user->getCurrentExchange());
        $product->setDescription($data->description);
        $this->getEntityManager()->persist($product);
        $this->getEntityManager()->flush();
        return true;
    }
    
    /**
     * Update a product
     * @param int $id
     * @param stdClass $data
     * @param J2\Bundle\ExchangeBundle\Entity\User $user
     */
    public function update($id,$data,$user){
        $product = $this->findOneByUser($id, $user);
        if(!$product instanceof Product)
            return false;
        $product->setName($data->name);
        $product->setCode($data->code);
        $product->setPrice($data->price);
        $product->setUpdatedBy($user);
        $product->setUpdatedAt(new \DateTime());
        $product->setDescription($data->description);
        $this->getEntityManager()->persist($product);
        $this->getEntityManager()->flush();
        return true;
    }
            


    /**
     * Delete a company product
     * @param int $productID 
     * @param J2\Bundle\ExchangeBundle\Entity\User $user
     * @return boolean
     */
    public function deleteProduct($productID,User $user){
        $product = $this->findOneBy(array('id'=>$productID,'company_id'=>$user->getCompany()->getId()));
        $this->getEntityManager()->remove($product);
        $this->getEntityManager()->flush();
    }

    /**
     *
     * @param User $user
     * @return type 
     */
    public function findByUser(User $user)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->where('p.company = :company')
           ->andWhere('p.exchange = :exchange')
           ->setParameter('company', $user->getCompany())
           ->setParameter('exchange', $user->getCurrentExchange());

        return $qb->getQuery()->execute();
    }
}